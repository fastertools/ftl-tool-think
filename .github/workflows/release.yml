name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run mode - build and test without publishing to registry'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  # ===== CHANGE DETECTION =====
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            rust:
              - '**/*.rs'
              - '**/Cargo.toml'
              - 'Cargo.lock'

  # ===== CONDITIONAL LINTING =====
  lint:
    name: Lint Code
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: wasm32-wasip1
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: make format
        working-directory: think
      
      - name: Run clippy
        run: make lint
        working-directory: think

  # ===== PREPARE RELEASE =====
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract version from tag
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if pre-release (contains -, like v1.0.0-beta)
            if [[ "$VERSION" == *"-"* ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          # Validate version format
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          
          echo "Preparing release ${VERSION} (prerelease: ${IS_PRERELEASE})"

  # ===== BUILD RELEASE =====
  build-release:
    name: Build Release
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build WASM (release mode)
        run: |
          # Build with release optimizations
          export CARGO_PROFILE_RELEASE_LTO=true
          export CARGO_PROFILE_RELEASE_OPT_LEVEL=z
          make build
        working-directory: think
      
      - name: Upload WASM artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-wasm
          path: think/target/wasm32-wasip1/release/think.wasm
          retention-days: 30

  # ===== TEST RELEASE =====
  test-release:
    name: Test Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip1
      
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: release-wasm
          path: think/target/wasm32-wasip1/release/
      
      - name: Run tests
        run: make test
        working-directory: think
      
      - name: Install Spin
        uses: fermyon/actions/spin/setup@v1
        with:
          version: v3.3.1
      
      - name: Smoke test release build
        run: |
          # Quick validation that the release build works
          spin up --listen 127.0.0.1:3000 &
          SPIN_PID=$!
          
          sleep 30
          
          if curl -s http://127.0.0.1:3000/mcp >/dev/null 2>&1; then
            echo "✅ Release build validated"
          else
            echo "❌ Release build failed smoke test"
            exit 1
          fi
          
          kill $SPIN_PID || true

  # ===== PUBLISH TO GHCR =====
  publish-ghcr:
    name: Publish to GHCR
    needs: [prepare, build-release, test-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: release-wasm
          path: think/target/wasm32-wasip1/release/
      
      - name: Install wkg
        run: |
          cargo install wkg --version 0.11.0
      
      - name: Log in to GitHub Container Registry
        if: github.event.inputs.dry_run != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install cosign
        if: github.event.inputs.dry_run != 'true'
        uses: sigstore/cosign-installer@v3
      
      - name: Publish to GHCR
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          # Registry image name
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/ftl-tool-think"
          
          # WASM file path
          WASM_FILE="think/target/wasm32-wasip1/release/think.wasm"
          
          # Check if WASM file exists
          if [ ! -f "$WASM_FILE" ]; then
            echo "❌ WASM file not found: $WASM_FILE"
            exit 1
          fi
          
          if [[ "$DRY_RUN" == "true" ]]; then
            echo "🔍 DRY RUN: Would publish ${IMAGE_NAME}:${VERSION}"
            echo "🔍 DRY RUN: Would publish ${IMAGE_NAME}:latest"
            echo "📁 WASM file: $WASM_FILE ($(ls -lh "$WASM_FILE" | awk '{print $5}'))"
          else
            # Actual publishing with wkg
            echo "📦 Publishing ftl-tool-think via wkg..."
            echo "  🎯 Target: ${IMAGE_NAME}:${VERSION}"
            echo "  📁 Source: $WASM_FILE"
            
            # Publish with version tag
            wkg oci push "${IMAGE_NAME}:${VERSION}" "$WASM_FILE"
            
            # Publish with latest tag
            wkg oci push "${IMAGE_NAME}:latest" "$WASM_FILE"
            
            # Sign both tags with cosign
            cosign sign --yes "${IMAGE_NAME}:${VERSION}"
            cosign sign --yes "${IMAGE_NAME}:latest"
            
            echo "✅ Published and signed ${IMAGE_NAME}:${VERSION} and :latest"
            
            # Make the package public using GitHub CLI
            PACKAGE_NAME="ftl-tool-think"
            echo "🔓 Making package public: ${PACKAGE_NAME}"
            
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}" \
              -f visibility='public' || echo "Note: Package might already be public or require manual update"
          fi

  # ===== CREATE GITHUB RELEASE =====
  github-release:
    name: Create GitHub Release
    needs: [prepare, build-release, test-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download WASM artifact
        uses: actions/download-artifact@v4
        with:
          name: release-wasm
          path: artifacts/
      
      - name: Create release package
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          # Create release directory
          mkdir -p release-package
          cp ftl.toml release-package/
          cp -r think release-package/
          cp README.md release-package/
          cp Makefile release-package/
          
          # Copy WASM file to proper location
          mkdir -p release-package/think/target/wasm32-wasip1/release
          cp artifacts/think.wasm release-package/think/target/wasm32-wasip1/release/
          
          # Create archives
          tar -czf "ftl-tool-think-${VERSION}.tar.gz" -C release-package .
          cd release-package && zip -r "../ftl-tool-think-${VERSION}.zip" . && cd ..
          
          # Generate checksums
          sha256sum "ftl-tool-think-${VERSION}.tar.gz" > "ftl-tool-think-${VERSION}.tar.gz.sha256"
          sha256sum "ftl-tool-think-${VERSION}.zip" > "ftl-tool-think-${VERSION}.zip.sha256"
      
      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          
          cat > release-notes.md << EOF
          ## FTL Tool Think ${VERSION}
          
          A sequential thinking tool for AI systems built with FTL and WebAssembly.
          
          ### What's Changed
          <!-- TODO: Generate from commit messages -->
          
          ### Installation
          
          #### Via FTL
          \`\`\`bash
          # Download and extract
          curl -LO https://github.com/${{ github.repository }}/releases/download/${VERSION}/ftl-tool-think-${VERSION}.tar.gz
          tar -xzf ftl-tool-think-${VERSION}.tar.gz
          ftl up
          \`\`\`
          
          #### Via Container Registry
          \`\`\`bash
          # Pull from GHCR
          wkg oci pull ghcr.io/${{ github.repository_owner }}/ftl-tool-think:${VERSION}
          \`\`\`
          
          ### Container Images
          - \`ghcr.io/${{ github.repository_owner }}/ftl-tool-think:${VERSION}\`
          - \`ghcr.io/${{ github.repository_owner }}/ftl-tool-think:latest\`
          
          ### Requirements
          - FTL framework
          - Rust toolchain (for building from source)
          
          ### Checksums
          See attached \`.sha256\` files for verification.
          EOF
          
          echo "notes_file=release-notes.md" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: FTL Tool Think ${{ needs.prepare.outputs.version }}
          body_path: ${{ steps.notes.outputs.notes_file }}
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
          files: |
            ftl-tool-think-${{ needs.prepare.outputs.version }}.tar.gz
            ftl-tool-think-${{ needs.prepare.outputs.version }}.tar.gz.sha256
            ftl-tool-think-${{ needs.prepare.outputs.version }}.zip
            ftl-tool-think-${{ needs.prepare.outputs.version }}.zip.sha256

  # ===== RELEASE SUMMARY =====
  release-summary:
    name: Release Summary
    if: always()
    needs: [prepare, lint, build-release, test-release, publish-ghcr, github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          echo "## Release Summary for FTL Tool Think ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$DRY_RUN" == "true" ]]; then
            echo "🔍 **Mode**: Dry Run" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚀 **Mode**: Live Release" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lint results
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ **Lint**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.lint.result }}" == "skipped" ]]; then
            echo "⏭️ **Lint**: Skipped (no Rust changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lint**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build status
          if [[ "${{ needs.build-release.result }}" == "success" ]]; then
            echo "✅ **Build**: Release build successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test status
          if [[ "${{ needs.test-release.result }}" == "success" ]]; then
            echo "✅ **Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Publishing status
          if [[ "${{ needs.publish-ghcr.result }}" == "success" ]]; then
            echo "✅ **GHCR**: Published successfully" >> $GITHUB_STEP_SUMMARY
            echo "🔐 **Security**: Component signed with cosign" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GHCR**: Publishing failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # GitHub release status
          if [[ "${{ needs.github-release.result }}" == "success" ]]; then
            echo "✅ **GitHub Release**: Created successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitHub Release**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Artifacts" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$DRY_RUN" != "true" ]]; then
            echo "- **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo "- **Container Registry**: \`ghcr.io/${{ github.repository_owner }}/ftl-tool-think:${VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Latest Tag**: \`ghcr.io/${{ github.repository_owner }}/ftl-tool-think:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Dry Run**: No artifacts published" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Publishing Method**: wkg (WebAssembly Package Tools)" >> $GITHUB_STEP_SUMMARY